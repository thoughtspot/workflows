name: Sync to Public Mirror

on:
  workflow_call:
    inputs:
      force_sync:
        description: 'Force sync all branches'
        required: false
        default: true
        type: boolean
      public_repo_name:
        description: 'Public repository name'
        required: false
        type: string
    secrets:
      SSH_DEPLOY_KEY:
        required: true

jobs:
  sync:
    # Job-level concurrency control - prevents multiple sync jobs from running simultaneously
    concurrency:
      group: sync-branches-${{ github.repository }}
      cancel-in-progress: false  # Queue to ensure all changes are processed
    
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Get all branches
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Determine Repository Names
        id: repo-names
        run: |
          # Get the current repository name
          PRIVATE_REPO=$(echo $GITHUB_REPOSITORY | cut -d '/' -f 2)
          echo "private_repo=$PRIVATE_REPO" >> $GITHUB_OUTPUT
          
          # Get organization name
          ORG=$(echo $GITHUB_REPOSITORY | cut -d '/' -f 1)
          echo "org=$ORG" >> $GITHUB_OUTPUT
          
          # Get public repository name
          if [[ -n "${{ inputs.public_repo_name }}" ]]; then
            # Use provided name
            PUBLIC_REPO="${{ inputs.public_repo_name }}"
          else
            # Remove "-private" suffix if present
            PUBLIC_REPO="${PRIVATE_REPO//-private/}"
          fi
          echo "public_repo=$PUBLIC_REPO" >> $GITHUB_OUTPUT
          
          echo "Source repository: $PRIVATE_REPO"
          echo "Target repository: $PUBLIC_REPO"
          echo "Organization: $ORG"
      
      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.SSH_DEPLOY_KEY }}
          
      - name: Configure SSH known hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan github.com >> ~/.ssh/known_hosts
          
      - name: Set Git identity
        run: |
          git config --global user.name "GitHub Action"
          git config --global user.email "action@github.com"
          
      - name: Get all branch names
        id: get-branches
        run: |
          # Get all branches and remove the refs/heads/ prefix
          BRANCHES=$(git branch -r | grep -v '\->' | sed 's/origin\///g' | tr '\n' ' ')
          echo "branches=$BRANCHES" >> $GITHUB_OUTPUT
          echo "Found branches: $BRANCHES"

      - name: Create workspace for public mirror
        run: |
          mkdir -p ~/public-mirror
          cd ~/public-mirror
          
          # Initialize empty git repository
          git init
          
          # Set Git identity in public repo directory
          git config user.name "GitHub Action"
          git config user.email "action@github.com"
          
          # Set up remote for the public mirror using SSH
          git remote add public git@github.com:${{ steps.repo-names.outputs.org }}/${{ steps.repo-names.outputs.public_repo }}.git
          
          # Check if public repo exists by attempting to connect to it
          if ! git ls-remote public HEAD &>/dev/null; then
            echo "::error::Public repository doesn't exist or can't be accessed: ${{ steps.repo-names.outputs.org }}/${{ steps.repo-names.outputs.public_repo }}"
            echo "Ensure the repository exists and the SSH key has appropriate access."
            exit 1
          fi
          
          # Try to fetch from public repository
          git fetch public || echo "Could not fetch from public repository, but continuing anyway."

      - name: Create and update all branches
        run: |
          BRANCHES="${{ steps.get-branches.outputs.branches }}"
          CURRENT_BRANCH=$(git rev-parse --abbrev-ref HEAD)
          
          echo "Processing branches: $BRANCHES"
          
          # Process each branch
          for branch in $BRANCHES; do
            echo "Processing branch: $branch"
            
            # Checkout the branch from private repo with explicit ref specification
            # Use '--' to disambiguate between files and branch names
            git checkout "refs/remotes/origin/$branch" -B "$branch" --

            # Create temporary directory for the branch content
            rm -rf /tmp/repo-content
            mkdir -p /tmp/repo-content
            
            # Copy all files except .git directory
            rsync -av --exclude='.git' ./ /tmp/repo-content/
            
            # Switch to public mirror workspace
            cd ~/public-mirror
            
            # Try to checkout the branch if it exists in public mirror
            git checkout "$branch" 2>/dev/null || git checkout -b "$branch"
            
            # Remove all content except .git directory
            find . -mindepth 1 -not -path "./.git*" -delete
            
            # Copy content from private repo
            rsync -av /tmp/repo-content/ ./
            
            # Commit changes
            git add --all
            # Only commit if there are changes
            git diff --staged --quiet || git commit -m "Update from source repository (workflow run: ${{ github.run_id }})"
            
            # Go back to the private repo directory
            cd $GITHUB_WORKSPACE
          done
          
          # Return to the original branch
          git checkout "$CURRENT_BRANCH" || true

      - name: Push all branches to public mirror
        run: |
          cd ~/public-mirror
          BRANCHES="${{ steps.get-branches.outputs.branches }}"
          
          echo "Starting push operations for all branches..."
          
          # Push all branches to public mirror
          for branch in $BRANCHES; do
            echo "Pushing branch: $branch"
            git checkout "$branch" || git checkout -b "$branch"
            
            # Retry logic for push operations to handle transient failures
            max_retries=3
            retry_count=0
            
            while [ $retry_count -lt $max_retries ]; do
              if git push -u public "$branch"; then
                echo "Successfully pushed $branch"
                break
              else
                retry_count=$((retry_count + 1))
                echo "Push failed for $branch, attempt $retry_count of $max_retries"
                if [ $retry_count -lt $max_retries ]; then
                  echo "Waiting 5 seconds before retry..."
                  sleep 5
                else
                  echo "::error::Failed to push $branch after $max_retries attempts"
                  exit 1
                fi
              fi
            done
          done
          
          echo "All branches successfully pushed to public mirror"
